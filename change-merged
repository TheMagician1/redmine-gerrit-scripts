#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#   Copyright (c) 2008-2011 Tobias Hieta <tobias@hieta.se>
#   Copyright (c) 2014      Rossen Apostolov <rossen@mochiron.org>
#   Copyright (c) 2015      Thomas LÃ¶ffler <loeffler@spooner-web.de>
#

# This is a simple Gerrit hook for updating Redmine with information about what changes
# are in Gerrit review.
#
# It parses the commit messages from Gerrit and looks for a Redmine issue in the style
# of "#1028".
#
# It then adds a informative message to the Redmine issue about the review URL and other
# data. It can also change the status of the issue to indicate that this issue is now
# under gerrit review.
#
# Script is tested with Redmine 3.4 stable and Gerrit 2.15.2

# set your API key here. You can find it under "My account" in Redmine, i.e. http://redmine.mydomain.com/my/account
REDMINE_API_KEY = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"

# the hostname or ip number of redmine, do not include the port number here.
REDMINE_HOST = "redmine.mydomain.com"

# The port number on which redmine is listening, change this to 443 if the
# redmine host is using a secure connection 
REDMINE_HOST_PORT_NUMBER = 80

# Set this to true if the redmine host is using a secure connection (SSL)
REDMINE_HOST_USING_SSL = False

# Set this to the url to refer back to the issue
GERRIT_HOST_URL = "http://gerrit.mydomain.com/c/"

# if you want the script to update the status of the issue in redmine
# you'll need to set this to the id number of that status. otherwise set
# it to None and it won't update the status

# the regex we use for findig the issue id
REDMINE_ISSUE_ID_REGEX = '\#(\d+)'

# which projects to run the script for
GERRIT_PROJECTS = ["PROJECT_NAME"]

# From documentation:
# change-merged --change <change id> --change-url <change url> --change-owner <change owner> --project <project name> --branch <branch> --topic <topic> --submitter <submitter> --commit <sha1> --newrev <sha1>

import optparse
from subprocess import check_output
import sys
import re
import http.client
import json

if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option('-c', '--change', dest='changeid')
    parser.add_option('-u', '--change-url', dest='changeurl')
    parser.add_option('-w', '--change-owner', dest='changeowner')
    parser.add_option('-n', '--change-owner-username', dest='changeuser')
    parser.add_option('-p', '--project', dest='project')
    parser.add_option('-b', '--branch', dest='branch')
    parser.add_option('-s', '--submitter', dest='submitter')
    parser.add_option('-m', '--submitter-username', dest='submituser')
    parser.add_option('-o', '--commit', dest='commit')
    parser.add_option('-a', '--newrev', dest='newrev')
    parser.add_option('-t', '--topic', dest='topic')

    (options, x) = parser.parse_args(sys.argv)

    if options.project not in GERRIT_PROJECTS:
        print("wrong project " + options.project)
        sys.exit(0)

    commitmsg = check_output(['git','cat-file','-p', options.commit])
    if not commitmsg or len(commitmsg) < 10:
        print("no commit msg!")
        sys.exit(0)
# git show -s --format=%s  e690993e20440a1e7307748527077bdd86e6d574
    subject = check_output(['git','show','-s','--format=%s', options.commit]).decode("utf-8").strip()

# Don't change the status, only put a note. Otherwise uncomment the line below.
    IN_REVIEW_STATUS = None
#    IN_REVIEW_STATUS = 10

    regex = re.compile(REDMINE_ISSUE_ID_REGEX, re.IGNORECASE)
    mgi = regex.finditer(commitmsg.decode("utf-8"))
    for mg in mgi:
       redmineid = int(mg.group(1))
       if not redmineid or redmineid == 0:
           print("no issue set here")
           sys.exit(0)

       redminecomment = "Gerrit change for Issue #{} has been merged into @{}@ of @{}@.\n".format(redmineid, options.branch, options.project)
       redminecomment += "Submitter: {}\n".format(options.submitter.strip('"'))
       redminecomment += "Change-Id: _{}_\n".format(options.changeid)
       redminecomment += "Gerrit URL: {}{}\n".format(GERRIT_HOST_URL, options.changeurl)
       redminecomment += "Subject: *{}*\n".format(subject)

       jsonstruct = {"issue":{}}
       jsonstruct["issue"]["notes"] = redminecomment
       if IN_REVIEW_STATUS:
           jsonstruct["issue"]["status_id"]=IN_REVIEW_STATUS

       jsondata = json.dumps(jsonstruct)

       puturl = "/issues/%d.json" % (redmineid)

       if REDMINE_HOST_USING_SSL:
           connection = http.client.HTTPSConnection(REDMINE_HOST, REDMINE_HOST_PORT_NUMBER)
       else:
           connection = http.client.HTTPConnection(REDMINE_HOST, REDMINE_HOST_PORT_NUMBER)

       connection.request('PUT', puturl, jsondata, {"Content-Type":"application/json", "X-Redmine-API-Key":REDMINE_API_KEY})
       response = connection.getresponse()
    sys.exit(0)
